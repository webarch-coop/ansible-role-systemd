# Copyright 2022-2023 Chris Croome
#
# This file is part of the Webarchitects systemd Ansible role.
#
# The Webarchitects systemd Ansible role is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
#
# The Webarchitects Ansible role is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with the Webarchitects systemd Ansible role. If not, see <https://www.gnu.org/licenses/>.
---
- name: Systemd unit file present
  block:

    - name: Debug the proposed systemd unit file variables
      ansible.builtin.debug:
        var: systemd_file
        verbosity: 2

    - name: Check the depth of the systemd file conf dictionary
      block:

        - name: Ensure that systemd_file.conf is a dictionary
          ansible.builtin.assert:
            that:
              - systemd_file.conf | ansible.builtin.type_debug == "dict"
            quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"

        - name: Include tasks to check the depth of the dictionary
          ansible.builtin.include_tasks: check_depth.yml
          vars:
            systemd_dictionary: "{{ systemd_file.conf }}"

        - name: Set a fact for the depth of the dictionary
          ansible.builtin.set_fact:
            systemd_conf_depth: "{{ systemd_dictionary_depth }}"

        - name: Ensure that systemd_file.conf dictionary depth is 1, 2 or 3
          ansible.builtin.assert:
            that:
              - systemd_conf_depth is regex('^1|2|3$')
            quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"

      when: systemd_file.conf is defined

    - name: Stat the systemd unit file
      ansible.builtin.stat:
        path: "{{ systemd_file.path }}"
      register: systemd_file_state

    - name: Ensure that contradictory variables are not defined
      ansible.builtin.assert:
        that:
          - systemd_file.state != "edited"
        fail_msg: "The {{ systemd_file.path }} file needs to exist before it can be edited, set state to present or templated for the file to be created."
      when:
        - systemd_file.state is defined
        - not systemd_file_state.stat.exists | bool

    - name: Systemd unit file existing and not depth three edit tasks
      block:

        - name: Slurp the systemd unit file
          ansible.builtin.slurp:
            path: "{{ systemd_file.path }}"
          register: systemd_file_b64encoded

        - name: Set a fact for the existing systemd unit file variables
          ansible.builtin.set_fact:
            systemd_file_vars: "{{ systemd_file_b64encoded['content'] | ansible.builtin.b64decode | community.general.jc('ini') }}"

        - name: Debug the existing systemd unit file variables
          ansible.builtin.debug:
            var: systemd_file_vars
            verbosity: 2

        - name: Debug the type of the file vars dictionary
          ansible.builtin.debug:
            msg: "{{ systemd_file_vars | ansible.builtin.dict2items | ansible.builtin.type_debug }}"
            verbosity: 2

        - name: Include tasks to check the depth of the dictionary
          ansible.builtin.include_tasks: check_depth.yml
          vars:
            systemd_dictionary: "{{ systemd_file_vars }}"

        - name: Set a fact for the depth of the dictionary
          ansible.builtin.set_fact:
            systemd_file_depth: "{{ systemd_dictionary_depth }}"

        - name: Ensure that existing dictionary depth is 1 or 2
          ansible.builtin.assert:
            that:
              - systemd_file_depth is regex('^1|2$')
            quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"

        - name: Fail as the variable depth is to be changed
          ansible.builtin.fail:
            msg: "The {{ systemd_file.path }} file needs to be templated not edited as the variable depth is to be changed"
          when: systemd_file_depth != systemd_conf_depth

        - name: Conditionally set a variable with the list of sections
          block:

            - name: Set a fact for the existing systemd unit file sections
              ansible.builtin.set_fact:
                systemd_file_sections: "{{ systemd_file_vars.keys() }}"

            - name: Debug the existing systemd unit file sections
              ansible.builtin.debug:
                var: systemd_file_sections
                verbosity: 2

          when: systemd_conf_depth == 2

        - name: Backup copy of the existing systemd unit file present
          ansible.builtin.copy:
            src: "{{ systemd_file.path }}"
            dest: "{{ systemd_file_backup }}"
            mode: "0644"
            owner: root
            group: root
            remote_src: true
          when: systemd_file.conf != systemd_file_vars

        - name: Comment block present
          block:

            - name: Ansible managed comment absent from the top of the file
              ansible.builtin.lineinfile:
                path: "{{ systemd_file.path }}"
                line: "# {{ systemd_ansible_managed }}"
                state: absent
                mode: "0644"
                owner: root
                group: root

            - name: Comment present at the top of the systemd unit file
              ansible.builtin.blockinfile:
                path: "{{ systemd_file.path }}"
                block: "{{ systemd_file.comment | ansible.builtin.comment }}"
                insertbefore: BOF
                mode: "0644"
                owner: root
                group: root

          when:
            - systemd_file.comment is defined
            - systemd_file.comment | length > 0

        - name: Ansible managed comment present at the top of the file
          ansible.builtin.lineinfile:
            path: "{{ systemd_file.path }}"
            line: "# {{ systemd_ansible_managed }}"
            state: present
            insertbefore: BOF
            mode: "0644"
            owner: root
            group: root

        - name: Include the systemd unit file edited tasks for sections
          ansible.builtin.include_tasks: file_edited.yml
          loop: "{{ systemd_file.conf | ansible.builtin.dict2items }}"
          loop_control:
            loop_var: systemd_section
          when: systemd_conf_depth == 2

        - name: Include the systemd unit file edited tasks without sections
          ansible.builtin.include_tasks: file_edited.yml
          vars:
            systemd_section: "{{ systemd_file.conf }}"
          when: systemd_conf_depth == 1

      when:
        - systemd_conf_depth is regex('^1|2$')
        - systemd_file_state.stat.exists | bool
        - ( systemd_file.state is not defined ) or ( systemd_file.state is regex('^edited|present$') )

    - name: Systemd unit file not existing or templated or depth three tasks
      block:

        - name: Systemd unit file directory present
          ansible.builtin.file:
            path: "{{ systemd_file.path | ansible.builtin.dirname }}"
            state: directory
            mode: 0755
            owner: root
            group: root

        - name: Systemd unit file templated
          ansible.builtin.template:
            src: unit.j2
            dest: "{{ systemd_file.path }}"
            mode: 0644
            owner: root
            group: root
          register: systemd_file_present

        - name: Set systemd_file_changed if the systemd unit file was changed
          ansible.builtin.set_fact:
            systemd_file_changed: true
          when:
            - systemd_file_present is defined
            - systemd_file_present.changed | bool

      when: >-
        ( not systemd_file_state.stat.exists | bool ) or
        ( systemd_file.state is defined and systemd_file.state == "templated" ) or
        ( systemd_conf_depth == 3 )

    - name: Stat the systemd unit file
      ansible.builtin.stat:
        path: "{{ systemd_file.path }}"
      register: systemd_file_state

  tags:
    - systemd
...
