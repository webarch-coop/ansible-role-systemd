# Copyright 2022-2024 Chris Croome
#
# This file is part of the Webarchitects systemd Ansible role.
#
# The Webarchitects systemd Ansible role is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
#
# The Webarchitects Ansible role is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with the Webarchitects systemd Ansible role. If not, see <https://www.gnu.org/licenses/>.
---
- name: Systemd unit configuration
  block:

    - name: Set systemd_file_changed to false
      ansible.builtin.set_fact:
        systemd_file_changed: false

    - name: Debug the systemd unit variables
      ansible.builtin.debug:
        var: systemd_unit
        verbosity: 2

    - name: The systemd_unit variable needs to be defined
      ansible.builtin.assert:
        that:
          - systemd_unit is defined
        quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"

    - name: "Include the package install tasks when defined for {{ systemd_unit.name }}"
      ansible.builtin.include_tasks: pkg_present.yml
      loop: "{{ systemd_unit.pkgs }}"
      loop_control:
        loop_var: systemd_pkg
        label: "{{ systemd_pkg }}"
      when:
        - systemd_unit.pkgs is defined
        - systemd_unit.pkgs | length > 0

    # Checks needed when this file is the role entry point
    - name: "Include check tasks for {{ systemd_unit.name }}"
      ansible.builtin.include_tasks: checks.yml
      when: >-
        ( systemd_unit_files_existing is not defined ) or
        ( systemd_unit_files_enabled is not defined )

    - name: "Include the systemd unit file absent tasks for {{ systemd_unit.name }}"
      ansible.builtin.include_tasks: file_absent.yml
      loop: "{{ systemd_unit.files }}"
      loop_control:
        loop_var: systemd_file
        label: "{{ systemd_file.path | ansible.builtin.basename }}"
      when:
        - systemd_file.state is defined
        - systemd_file.state == "absent"

    - name: "Include the systemd unit file edited, present or templated tasks for {{ systemd_unit.name }}"
      ansible.builtin.include_tasks: file_present.yml
      loop: "{{ systemd_unit.files }}"
      loop_control:
        loop_var: systemd_file
        label: "{{ systemd_file.path | ansible.builtin.basename }}"
      when: >-
        ( systemd_file.state is not defined ) or
        ( systemd_file.state is regex('^edited|present|templated$') )

    - name: Set the unit state and restart it when the unit file exists
      block:

        - name: "Verify the service when systemd_unit.verify is defined for {{ systemd_unit.name }}"
          ansible.builtin.command: "systemd-analyze verify {{ systemd_unit.verify }}"
          check_mode: false
          changed_when: false
          when: systemd_unit.verify is defined

        - name: Verify the service when systemd_unit.verify is not defined
          block:

            - name: "Include the checks for {{ systemd_unit.name }}"
              ansible.builtin.include_tasks: checks.yml

            - name: "Verify the service when it is in the list of existing unit files after appending .service for {{ systemd_unit.name }}"
              ansible.builtin.command: "systemd-analyze verify {{ systemd_unit.name }}.service --man=false"
              check_mode: false
              changed_when: false
              when:
                - systemd_unit.name is not regex('[.]service$')
                - systemd_unit_verify in systemd_unit_files_enabled

            - name: "Verify the service when it is in the list of existing unit files for {{ systemd_unit.name }}"
              ansible.builtin.command: "systemd-analyze verify {{ systemd_unit.name }}"
              check_mode: false
              changed_when: false
              when: systemd_unit.name in systemd_unit_files_enabled

          when: systemd_unit.verify is not defined

        - name: Systemd daemon-reload
          ansible.builtin.systemd_service:
            daemon_reload: true
          when:
            - systemd_file_changed is defined
            - systemd_file_changed | bool

        - name: "Systemd {{ systemd_unit.name }} unit not enabled and stopped"
          ansible.builtin.systemd_service:
            name: "{{ systemd_unit.name }}"
            enabled: false
            state: stopped
          when:
            - systemd_unit.state is defined
            - systemd_unit.state == "stopped"

        - name: "Systemd unit {{ systemd_unit.name }} enabled"
          ansible.builtin.systemd_service:
            name: "{{ systemd_unit.name }}"
            enabled: true
          when: >-
            ( systemd_unit.state is not defined ) or
            ( systemd_unit.state == "enabled" ) or
            ( systemd_unit.state == "reboot" )

        - name: Debug systemd_unit.state
          ansible.builtin.debug:
            var: systemd_unit.state

        - name: "Systemd {{ systemd_unit.name }} unit started tasks included"
          ansible.builtin.include_tasks: unit_started.yml
          when: >-
            ( systemd_unit.state is not defined ) or
            ( systemd_unit.state == "enabled" )

        - name: "Systemd {{ systemd_unit.name }} unit restarted"
          ansible.builtin.systemd_service:
            service: "{{ systemd_unit.name }}"
            state: restarted
          when: >-
            ( ( systemd_unit.state is not defined ) or
            ( systemd_unit.state == "enabled" ) ) and
            ( ( systemd_file_changed is defined ) and
            ( systemd_file_changed | bool ) )

        - name: Reboot and pause for 15 seconds
          block:

            - name: Rebooting {{ ansible_hostname }}"
              ansible..builtin.debug:
                msg: "The server is about to be rebooted as {{ systemd_unit.name }} is changed"

            - name: Rebooting as {{ systemd_unit.name }} is changed"
              ansible.builtin.reboot:
                reboot_command: reboot -h now

            - name: Pause for 15 seconds to allow the services on the server to all start
              ansible.builtin.pause:
                seconds: 15

          when:
            - systemd_file_changed is defined
            - systemd_file_changed | bool
            - systemd_unit.state is defined
            - systemd_unit.state == "reboot"

      when: systemd_file_state.stat.exists | bool

  tags:
    - systemd
...
